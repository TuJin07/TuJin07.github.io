<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>函数 on 荼锦</title>
        <link>https://TuJin07.github.io/tags/%E5%87%BD%E6%95%B0/</link>
        <description>Recent content in 函数 on 荼锦</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 07 Jan 2023 20:27:48 +0800</lastBuildDate><atom:link href="https://TuJin07.github.io/tags/%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Golang中的两个保留函数: main()和init()</title>
        <link>https://TuJin07.github.io/p/golang%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BF%9D%E7%95%99%E5%87%BD%E6%95%B0-main%E5%92%8Cinit/</link>
        <pubDate>Sat, 07 Jan 2023 20:27:48 +0800</pubDate>
        
        <guid>https://TuJin07.github.io/p/golang%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BF%9D%E7%95%99%E5%87%BD%E6%95%B0-main%E5%92%8Cinit/</guid>
        <description>&lt;img src="https://TuJin07.github.io/p/golang%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BF%9D%E7%95%99%E5%87%BD%E6%95%B0-main%E5%92%8Cinit/cover.jpeg" alt="Featured image of post Golang中的两个保留函数: main()和init()" /&gt;&lt;h1 id=&#34;go语言中的main函数与init函数&#34;&gt;Go语言中的main函数与init函数&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Go语言中有两个比较重要的函数：&lt;code&gt;main()&lt;/code&gt;和&lt;code&gt;init()&lt;/code&gt;。这两个函数在程序运行时都会被自动调用，但它们的调用时机和作用却不尽相同。本文将探讨这两个函数的异同点以及各自的使用场景。&lt;/p&gt;
&lt;h2 id=&#34;main函数&#34;&gt;main函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt;函数是Go程序的入口函数，它是程序运行时的起点。无论是执行可执行文件还是运行源代码，都需要首先找到&lt;code&gt;main()&lt;/code&gt;函数。在&lt;code&gt;main()&lt;/code&gt;函数中，我们可以编写程序的逻辑代码，定义变量，调用函数等。当&lt;code&gt;main()&lt;/code&gt;函数执行完毕后，程序将会退出。&lt;/p&gt;
&lt;p&gt;以下是一个简单的&lt;code&gt;main()&lt;/code&gt;函数示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在上述代码中，我们调用了&lt;code&gt;fmt&lt;/code&gt;包中的&lt;code&gt;Println()&lt;/code&gt;函数，用于向控制台输出一句话“Hello, World!”。&lt;/p&gt;
&lt;p&gt;在实际编程中，和其他所有的语言一样，我们需要根据实际需求编写&lt;code&gt;main()&lt;/code&gt;函数中的逻辑代码，以便完成程序的功能。&lt;/p&gt;
&lt;h2 id=&#34;init函数&#34;&gt;init函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;init()&lt;/code&gt;函数是Go语言中的一个特殊函数，它与&lt;code&gt;main()&lt;/code&gt;函数有着明显的不同。&lt;code&gt;init()&lt;/code&gt;函数是在程序启动时自动执行的，它没有参数和返回值。它的作用是在程序运行前做一些准备工作。&lt;code&gt;init()&lt;/code&gt;函数可以定义在任何包中，且可以定义多个，而&lt;code&gt;main()&lt;/code&gt;函数只能定义在&lt;code&gt;main&lt;/code&gt;包中，且只能定义一个。&lt;/p&gt;
&lt;p&gt;以下是一个简单的&lt;code&gt;init()&lt;/code&gt;函数示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Initializing...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在上述代码中，我们在&lt;code&gt;main&lt;/code&gt;包中定义了一个&lt;code&gt;init()&lt;/code&gt;函数，该函数在程序启动时将会被自动调用，并输出一句话“Initializing&amp;hellip;”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init()&lt;/code&gt;函数是在程序启动时自动调用的函数。当运行一个Go程序时并导入所使用的包时，程序会自动寻找并调用所有导入的包中定义好的&lt;code&gt;init()&lt;/code&gt;函数。&lt;code&gt;init()&lt;/code&gt;函数可以用于初始化一些变量，打开数据库连接，注册HTTP服务等。&lt;/p&gt;
&lt;h2 id=&#34;两者的执行顺序&#34;&gt;两者的执行顺序&lt;/h2&gt;
&lt;p&gt;通过一张图可以形象地表达当Go程序执行时，&lt;code&gt;main()&lt;/code&gt;函数和&lt;code&gt;init()&lt;/code&gt;函数的执行顺序。来源：&lt;a class=&#34;link&#34; href=&#34;https://www.yuque.com/aceld/mo95lb/kk9cvo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://TuJin07.github.io/p/golang%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BF%9D%E7%95%99%E5%87%BD%E6%95%B0-main%E5%92%8Cinit/1650528765014-63d3d631-428e-4468-bc95-40206d8cd252.png&#34;
	width=&#34;750&#34;
	height=&#34;326&#34;
	srcset=&#34;https://TuJin07.github.io/p/golang%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BF%9D%E7%95%99%E5%87%BD%E6%95%B0-main%E5%92%8Cinit/1650528765014-63d3d631-428e-4468-bc95-40206d8cd252_hu58934b652c0ab20c46c40eaa4906559a_122641_480x0_resize_box_3.png 480w, https://TuJin07.github.io/p/golang%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BF%9D%E7%95%99%E5%87%BD%E6%95%B0-main%E5%92%8Cinit/1650528765014-63d3d631-428e-4468-bc95-40206d8cd252_hu58934b652c0ab20c46c40eaa4906559a_122641_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;31-init.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;552px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;init()&lt;/code&gt;和&lt;code&gt;main()&lt;/code&gt;函数是Go中的两个保留函数。一般而言，&lt;code&gt;init()&lt;/code&gt;函数在包被导入的同时执行，通常在包常量和包变量定义之后用于执行初始化工作。而&lt;code&gt;main()&lt;/code&gt;函数是程序的入口点，负责实现程序逻辑。这是二者最根本的区别。&lt;/p&gt;
&lt;p&gt;其它一些形式上的区别如下所列出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt;函数是程序的入口函数，而&lt;code&gt;init()&lt;/code&gt;函数是在程序启动时自动调用的函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt;函数只能定义在&lt;code&gt;main&lt;/code&gt;包中，而&lt;code&gt;init()&lt;/code&gt;函数可以定义在任何包中。&lt;/li&gt;
&lt;li&gt;一个Go程序只能有一个&lt;code&gt;main()&lt;/code&gt;函数，但可以有多个&lt;code&gt;init()&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
