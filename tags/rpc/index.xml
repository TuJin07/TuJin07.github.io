<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>RPC on 荼锦</title>
        <link>https://TuJin07.github.io/tags/rpc/</link>
        <description>Recent content in RPC on 荼锦</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 29 Mar 2023 14:06:18 +0800</lastBuildDate><atom:link href="https://TuJin07.github.io/tags/rpc/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>RPC与HTTP在接口实现上的区别</title>
        <link>https://TuJin07.github.io/p/rpc%E4%B8%8Ehttp%E5%9C%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Wed, 29 Mar 2023 14:06:18 +0800</pubDate>
        
        <guid>https://TuJin07.github.io/p/rpc%E4%B8%8Ehttp%E5%9C%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;img src="https://TuJin07.github.io/p/rpc%E4%B8%8Ehttp%E5%9C%A8%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB/cover.jpeg" alt="Featured image of post RPC与HTTP在接口实现上的区别" /&gt;&lt;h1 id=&#34;从本质出发探讨rpc与http在接口实现上的区别&#34;&gt;从本质出发，探讨RPC与HTTP在接口实现上的区别&lt;/h1&gt;
&lt;p&gt;当谈到 RPC 和 HTTP 时，实际上谈的是两种不同的通信模型和协议。这两种协议有着不同的设计原则和用途，因此应用场景和优劣也有所不同。&lt;/p&gt;
&lt;h2 id=&#34;二者的通信模型定义&#34;&gt;二者的通信模型定义&lt;/h2&gt;
&lt;h3 id=&#34;rpc远程方法调用&#34;&gt;RPC：远程方法调用&lt;/h3&gt;
&lt;p&gt;**RPC 是一种面向远程对象的通信模型，它的核心思想是远程方法调用。**RPC 意在简化调用远程对象提供的方法的过程，客户端通过调用远程函数并传递参数来发起请求，服务器将响应返回给客户端。RPC 通常使用二进制格式序列化数据，以提高效率。RPC 有多种实现，如 gRPC、Thrift 等。&lt;/p&gt;
&lt;h3 id=&#34;http通信协议&#34;&gt;HTTP：通信协议&lt;/h3&gt;
&lt;p&gt;**HTTP 本质上是一种通信协议，它约定了一种通信的格式。我们常用的基于 HTTP 的通信模型是一种面向资源的通信模型，它的核心思想是客户端通过 URL 来标识服务器上的资源，并使用不同的 HTTP 方法（如 GET、POST、PUT、DELETE 等）来操作这些资源。**HTTP 通常使用文本格式传输数据，如 JSON、XML 等。HTTP 是一种通用的协议，广泛应用于 Web 开发和移动应用程序开发。&lt;/p&gt;
&lt;h2 id=&#34;从协议设计原则出发&#34;&gt;从协议设计原则出发&lt;/h2&gt;
&lt;h3 id=&#34;rpc简洁高效且易用让远程过程调用更简单&#34;&gt;RPC：简洁、高效且易用，让远程过程调用更简单&lt;/h3&gt;
&lt;p&gt;RPC 的设计原则是**简洁、高效和易用。**RPC 的设计思想是将远程过程调用封装成本地方法调用，让远程调用看起来像是本地调用一样简单。在 RPC 的设计中，客户端和服务端之间的通信方式类似于函数调用，客户端向服务端发送请求消息，服务端接收到请求后处理请求并返回响应消息给客户端。&lt;/p&gt;
&lt;p&gt;**RPC 的设计目标是让远程过程调用的使用尽量像本地过程调用，从而使得使用RPC的程序员能够更容易地进行程序设计。**RPC 通常使用二进制格式传输数据，以减少传输数据量和提高传输效率。RPC 的实现通常会考虑传输协议、编解码器、服务定义和序列化等方面的问题，以提供完整的远程调用方案。&lt;/p&gt;
&lt;h3 id=&#34;http灵活与可拓展性广泛使用的通用协议&#34;&gt;HTTP：灵活与可拓展性，广泛使用的通用协议&lt;/h3&gt;
&lt;p&gt;HTTP 的设计原则是**灵活和可扩展。**HTTP 支持多种数据格式和编码方式，支持多种传输协议（如 TCP、UDP、WebSocket 等）。HTTP 可以与不同的编程语言和框架配合使用，以提供多样化的 Web 服务。HTTP 的设计思想是基于万维网的分布式体系结构。**HTTP的核心是客户端和服务器之间的请求和响应模型。&lt;/p&gt;
&lt;h2 id=&#34;结合优劣二者在应用领域上的差别&#34;&gt;结合优劣，二者在应用领域上的差别&lt;/h2&gt;
&lt;p&gt;**RPC通常应用于需要高效远程调用的场景，例如微服务，分布式系统和大型Web应用程序。**RPC可以支持多种传输协议，以适应不同的网络环境和应用场景。&lt;strong&gt;RPC的优点是效率高、易用性好，缺点是不够灵活，需要进行复杂的协议设计和管理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**HTTP通常用于Web应用程序和移动应用程序的开发。**HTTP的请求-响应模型简单直接，易于理解和实现。HTTP具有广泛的支持和易于扩展的特点，因此它是互联网上最常用的协议之一。&lt;strong&gt;HTTP的优点是通用性好、易于使用，缺点是效率相对较低，需要使用文本格式进行数据传输。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;有 HTTP 了，为什么还需要 RPC？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本段来源：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/fe5ccfc5d7bd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP 的本质？HTTP 和 RPC 的区别？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可能你常听到什么什么之间是 RPC 调用的，那你有没有想过为什么要 RPC， 我们直接 WebClient HTTP 调用不行么？&lt;/p&gt;
&lt;p&gt;其实 RPC 调用是因为服务的拆分，或者本身公司内部的多个服务之间的通信。服务的拆分独立部署，那服务间的调用就必然需要网络通信，用 WebClient 调用当然可行，但是比较麻烦。我们想即使服务被拆分了但是&lt;strong&gt;使用起来还是和之前本地调用一样方便&lt;/strong&gt;。所以就出现了 RPC 框架，来屏蔽这些底层调用细节，使得我们编码上还是和之前本地调用相差不多。&lt;/p&gt;
&lt;p&gt;并且 HTTP 协议比较的冗余，RPC 都是内部调用所以不需要太考虑通用性，只要公司内部保持格式统一即可。所以可以&lt;strong&gt;做各种定制化的协议来使得通信更高效&lt;/strong&gt;。比如规定 yes 代表 yes的练级攻略，你看是不是更高效了，少传输的 5 个字。就像特殊行动的暗号，高效简洁！&lt;/p&gt;
&lt;p&gt;所以公司内部服务的调用一般都用 RPC，而 HTTP 的优势在于通用，大家都认可这个协议，所以&lt;strong&gt;三方平台提供的接口都是通过 HTTP 协议调用的&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
